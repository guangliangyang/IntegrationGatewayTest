<policies>
    <inbound>
        <!-- Global CORS Policy -->
        <cors allow-credentials="false">
            <allowed-origins>
                <origin>*</origin>
            </allowed-origins>
            <allowed-methods preflight-result-max-age="300">
                <method>GET</method>
                <method>POST</method>
                <method>PUT</method>
                <method>DELETE</method>
                <method>HEAD</method>
                <method>OPTIONS</method>
            </allowed-methods>
            <allowed-headers>
                <header>*</header>
            </allowed-headers>
            <expose-headers>
                <header>*</header>
            </expose-headers>
        </cors>
        
        <!-- Global Security Headers -->
        <set-header name="X-Content-Type-Options" exists-action="override">
            <value>nosniff</value>
        </set-header>
        <set-header name="X-Frame-Options" exists-action="override">
            <value>DENY</value>
        </set-header>
        <set-header name="X-XSS-Protection" exists-action="override">
            <value>1; mode=block</value>
        </set-header>
        <set-header name="Strict-Transport-Security" exists-action="override">
            <value>max-age=31536000; includeSubDomains</value>
        </set-header>
        
        <!-- Request ID for tracing -->
        <set-header name="X-Request-ID" exists-action="skip">
            <value>@(Guid.NewGuid().ToString())</value>
        </set-header>
        
        <!-- Remove sensitive headers -->
        <set-header name="Authorization" exists-action="delete" />
        <set-header name="X-API-Key" exists-action="delete" />
    </inbound>
    
    <backend>
        <base />
    </backend>
    
    <outbound>
        <!-- Global response headers -->
        <set-header name="X-Powered-By" exists-action="delete" />
        <set-header name="Server" exists-action="delete" />
        
        <!-- Add API version to response -->
        <set-header name="X-API-Version" exists-action="override">
            <value>@(context.Api.Version)</value>
        </set-header>
        
        <!-- Add response time -->
        <set-header name="X-Response-Time" exists-action="override">
            <value>@(context.Elapsed.TotalMilliseconds.ToString())</value>
        </set-header>
        
        <base />
    </outbound>
    
    <on-error>
        <!-- Global error handling -->
        <set-header name="X-Error-Source" exists-action="override">
            <value>APIM Gateway</value>
        </set-header>
        
        <!-- Log error details -->
        <trace source="GlobalErrorHandler" severity="error">
            <message>@($"Global error: {context.LastError.Source} - {context.LastError.Reason} - {context.LastError.Message}")</message>
        </trace>
        
        <!-- Return standardized error response -->
        <return-response>
            <set-status code="@(context.Response.StatusCode)" reason="@(context.Response.StatusReason)" />
            <set-header name="Content-Type" exists-action="override">
                <value>application/json</value>
            </set-header>
            <set-body>@{
                var error = context.LastError;
                var errorResponse = new JObject();
                errorResponse["error"] = new JObject();
                errorResponse["error"]["code"] = error.Source;
                errorResponse["error"]["message"] = error.Reason;
                errorResponse["error"]["details"] = error.Message;
                errorResponse["traceId"] = context.RequestId;
                errorResponse["timestamp"] = DateTime.UtcNow.ToString("yyyy-MM-ddTHH:mm:ssZ");
                return errorResponse.ToString();
            }</set-body>
        </return-response>
        
        <base />
    </on-error>
</policies>