<policies>
    <inbound>
        <!-- Input validation for product ID -->
        <set-variable name="productId" value="@(context.Request.MatchedParameters["id"])" />
        
        <choose>
            <when condition="@(string.IsNullOrWhiteSpace((string)context.Variables["productId"]))">
                <return-response>
                    <set-status code="400" reason="Bad Request" />
                    <set-header name="Content-Type" exists-action="override">
                        <value>application/json</value>
                    </set-header>
                    <set-body>@{
                        return new JObject(
                            new JProperty("error", new JObject(
                                new JProperty("code", "InvalidParameter"),
                                new JProperty("message", "Product ID cannot be empty"),
                                new JProperty("parameter", "id"),
                                new JProperty("traceId", context.RequestId)
                            ))
                        ).ToString();
                    }</set-body>
                </return-response>
            </when>
        </choose>
        
        <!-- Check cache first -->
        <cache-lookup vary-by-developer="false" 
                      vary-by-developer-groups="false" 
                      downstream-caching-type="none">
            <vary-by-header>Accept</vary-by-header>
            <vary-by-header>Authorization</vary-by-header>
        </cache-lookup>
        
        <!-- Set backend URL -->
        <set-backend-service base-url="@((string)context.Variables["backend-url"])" />
        
        <base />
    </inbound>
    
    <backend>
        <base />
    </backend>
    
    <outbound>
        <!-- Cache successful responses for 10 minutes (individual products change less frequently) -->
        <choose>
            <when condition="@(context.Response.StatusCode == 200)">
                <cache-store duration="600" />
                
                <!-- Add cache headers -->
                <set-header name="Cache-Control" exists-action="override">
                    <value>public, max-age=600</value>
                </set-header>
                <set-header name="X-Cache-Status" exists-action="override">
                    <value>MISS</value>
                </set-header>
                
                <!-- Add ETag for conditional requests -->
                <choose>
                    <when condition="@(context.Response.Body != null)">
                        <set-variable name="responseBody" value="@(context.Response.Body.As<JObject>(preserveContent: true))" />
                        <set-variable name="etag" value="@{
                            var product = (JObject)context.Variables["responseBody"];
                            var hash = System.Security.Cryptography.SHA256.Create();
                            var bytes = System.Text.Encoding.UTF8.GetBytes(product.ToString());
                            var hashBytes = hash.ComputeHash(bytes);
                            return Convert.ToBase64String(hashBytes).Substring(0, 8);
                        }" />
                        <set-header name="ETag" exists-action="override">
                            <value>@($"\"{context.Variables["etag"]}\"")</value>
                        </set-header>
                    </when>
                </choose>
            </when>
            <when condition="@(context.Response.StatusCode == 404)">
                <!-- Cache 404 responses for shorter duration to handle newly created products -->
                <cache-store duration="60" />
                <set-header name="Cache-Control" exists-action="override">
                    <value>public, max-age=60</value>
                </set-header>
                <set-header name="X-Cache-Status" exists-action="override">
                    <value>MISS</value>
                </set-header>
            </when>
            <otherwise>
                <!-- Don't cache error responses -->
                <set-header name="Cache-Control" exists-action="override">
                    <value>no-cache, no-store, must-revalidate</value>
                </set-header>
            </otherwise>
        </choose>
        
        <!-- Add product metadata to headers -->
        <choose>
            <when condition="@(context.Response.StatusCode == 200 && context.Response.Body != null)">
                <set-variable name="responseBody" value="@(context.Response.Body.As<JObject>(preserveContent: true))" />
                <set-header name="X-Product-Id" exists-action="override">
                    <value>@(((JObject)context.Variables["responseBody"])["id"]?.ToString() ?? "")</value>
                </set-header>
                <set-header name="X-Product-Version" exists-action="override">
                    <value>@(context.Request.MatchedParameters["version"])</value>
                </set-header>
            </when>
        </choose>
        
        <base />
    </outbound>
    
    <on-error>
        <!-- Don't cache error responses -->
        <set-header name="Cache-Control" exists-action="override">
            <value>no-cache, no-store, must-revalidate</value>
        </set-header>
        
        <!-- Handle specific backend errors -->
        <choose>
            <when condition="@(context.Response.StatusCode == 404)">
                <return-response>
                    <set-status code="404" reason="Not Found" />
                    <set-header name="Content-Type" exists-action="override">
                        <value>application/json</value>
                    </set-header>
                    <set-body>@{
                        return new JObject(
                            new JProperty("error", new JObject(
                                new JProperty("code", "ProductNotFound"),
                                new JProperty("message", $"Product with ID '{context.Variables["productId"]}' was not found"),
                                new JProperty("productId", context.Variables["productId"]),
                                new JProperty("traceId", context.RequestId),
                                new JProperty("timestamp", DateTime.UtcNow.ToString("yyyy-MM-ddTHH:mm:ssZ"))
                            ))
                        ).ToString();
                    }</set-body>
                </return-response>
            </when>
        </choose>
        
        <base />
    </on-error>
</policies>