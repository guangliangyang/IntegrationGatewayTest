name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
  workflow_dispatch:

env:
  DOTNET_VERSION: '8.0.x'
  SOLUTION_FILE: 'IntegrationGateway.sln'
  BUILD_CONFIGURATION: 'Release'
  ARTIFACT_NAME: 'integration-gateway'

jobs:
  # ‰ª£Á†ÅË¥®ÈáèÊ£ÄÊü•
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore ${{ env.SOLUTION_FILE }}

      - name: Check code format
        run: dotnet format --verify-no-changes --verbosity diagnostic ${{ env.SOLUTION_FILE }}

      - name: Build solution
        run: dotnet build ${{ env.SOLUTION_FILE }} --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore

      - name: Run static analysis
        run: |
          # Install security analyzer
          dotnet tool install --global security-scan
          # Run security scan
          security-scan ${{ env.SOLUTION_FILE }} --ignore-msbuild-errors

  # ÂçïÂÖÉÊµãËØïÂíåÈõÜÊàêÊµãËØï
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: code-quality
    strategy:
      matrix:
        test-category: [unit, integration, performance]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore ${{ env.SOLUTION_FILE }}

      - name: Build solution
        run: dotnet build ${{ env.SOLUTION_FILE }} --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore

      - name: Start test dependencies
        if: matrix.test-category == 'integration'
        run: |
          # Start mock services for integration tests
          cd stubs/ErpStub
          nohup dotnet run --project ErpStub.csproj --urls "http://localhost:5051" &
          cd ../WarehouseStub
          nohup dotnet run --project WarehouseStub.csproj --urls "http://localhost:5052" &
          # Wait for services to start
          sleep 10

      - name: Run Unit Tests
        if: matrix.test-category == 'unit'
        run: |
          dotnet test ${{ env.SOLUTION_FILE }} \
            --configuration ${{ env.BUILD_CONFIGURATION }} \
            --no-build \
            --no-restore \
            --logger trx \
            --collect:"XPlat Code Coverage" \
            --results-directory ./TestResults/ \
            --filter "Category!=Integration&Category!=Performance"

      - name: Run Integration Tests
        if: matrix.test-category == 'integration'
        run: |
          dotnet test tests/Integration.Tests/Integration.Tests.csproj \
            --configuration ${{ env.BUILD_CONFIGURATION }} \
            --no-build \
            --no-restore \
            --logger trx \
            --collect:"XPlat Code Coverage" \
            --results-directory ./TestResults/
        env:
          ASPNETCORE_ENVIRONMENT: Test

      - name: Run Performance Tests
        if: matrix.test-category == 'performance'
        run: |
          cd tests/Performance.Tests
          timeout 300 dotnet run -- smoke || echo "Performance test completed with timeout"

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.test-category }}
          path: TestResults/
          retention-days: 7

      - name: Upload code coverage
        uses: codecov/codecov-action@v4
        if: matrix.test-category != 'performance'
        with:
          files: TestResults/*/coverage.cobertura.xml
          flags: ${{ matrix.test-category }}
          name: codecov-${{ matrix.test-category }}

  # ÊûÑÂª∫ Docker ÈïúÂÉè
  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/integration-gateway
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./src/IntegrationGateway.Api/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # ÂÆâÂÖ®Êâ´Êèè
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: docker-build
    permissions:
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.docker-build.outputs.image-tag }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: 'csharp'

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # ÈÉ®ÁΩ≤Âà∞ Azure
  deploy:
    name: Deploy to Azure
    runs-on: ubuntu-latest
    needs: [docker-build, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Azure Container Apps
        uses: azure/container-apps-deploy-action@v2
        with:
          containerAppName: integration-gateway
          resourceGroup: ${{ secrets.AZURE_RESOURCE_GROUP }}
          imageToDeploy: ${{ needs.docker-build.outputs.image-tag }}
          environmentVariables: |
            ASPNETCORE_ENVIRONMENT=Production
            ApplicationInsights__ConnectionString=${{ secrets.APPINSIGHTS_CONNECTION_STRING }}
            Jwt__SecretKey=${{ secrets.JWT_SECRET_KEY }}

  # ÂèëÂ∏ÉÈÄöÁü•
  notify:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    steps:
      - name: Notify Teams
        if: needs.deploy.result == 'success'
        run: |
          curl -X POST ${{ secrets.TEAMS_WEBHOOK_URL }} \
            -H 'Content-Type: application/json' \
            -d '{
              "text": "üöÄ Integration Gateway deployed successfully to Azure!",
              "sections": [{
                "activityTitle": "Deployment Success",
                "activitySubtitle": "Branch: ${{ github.ref_name }}",
                "facts": [
                  {"name": "Repository", "value": "${{ github.repository }}"},
                  {"name": "Commit", "value": "${{ github.sha }}"},
                  {"name": "Author", "value": "${{ github.actor }}"}
                ]
              }]
            }'

      - name: Notify on failure
        if: needs.deploy.result == 'failure'
        run: |
          curl -X POST ${{ secrets.TEAMS_WEBHOOK_URL }} \
            -H 'Content-Type: application/json' \
            -d '{
              "text": "‚ùå Integration Gateway deployment failed!",
              "sections": [{
                "activityTitle": "Deployment Failed",
                "activitySubtitle": "Branch: ${{ github.ref_name }}",
                "facts": [
                  {"name": "Repository", "value": "${{ github.repository }}"},
                  {"name": "Commit", "value": "${{ github.sha }}"},
                  {"name": "Author", "value": "${{ github.actor }}"}
                ]
              }]
            }'