name: Dependency Update

on:
  schedule:
    - cron: '0 2 * * 1'  # Every Monday at 2 AM UTC
  workflow_dispatch:

jobs:
  update-dependencies:
    name: Update .NET Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Install dotnet-outdated
        run: dotnet tool install --global dotnet-outdated-tool

      - name: Check for outdated packages
        id: check-outdated
        run: |
          echo "Checking for outdated packages..."
          dotnet outdated --output json > outdated.json
          
          if [ $(cat outdated.json | jq '.Projects | length') -gt 0 ]; then
            echo "has_updates=true" >> $GITHUB_OUTPUT
            echo "Updates available:"
            cat outdated.json | jq -r '.Projects[].TargetFrameworks[].Dependencies[] | select(.IsOutdated == true) | "\(.Id): \(.ResolvedVersion) -> \(.LatestVersion)"'
          else
            echo "has_updates=false" >> $GITHUB_OUTPUT
            echo "All packages are up to date"
          fi

      - name: Update packages
        if: steps.check-outdated.outputs.has_updates == 'true'
        run: |
          echo "Updating packages..."
          
          # Update minor and patch versions only (safer updates)
          projects=(
            "src/IntegrationGateway.Api/IntegrationGateway.Api.csproj"
            "src/IntegrationGateway.Application/IntegrationGateway.Application.csproj"
            "src/IntegrationGateway.Services/IntegrationGateway.Services.csproj"
            "src/IntegrationGateway.Models/IntegrationGateway.Models.csproj"
            "tests/Integration.Tests/Integration.Tests.csproj"
            "tests/Performance.Tests/Performance.Tests.csproj"
          )
          
          for project in "${projects[@]}"; do
            if [ -f "$project" ]; then
              echo "Updating $project"
              dotnet add "$project" package Microsoft.AspNetCore.OpenApi
              dotnet add "$project" package Microsoft.Extensions.DependencyInjection
              # Add more specific updates as needed
            fi
          done

      - name: Build and test
        if: steps.check-outdated.outputs.has_updates == 'true'
        run: |
          dotnet restore
          dotnet build --configuration Release
          dotnet test --configuration Release --no-build

      - name: Create Pull Request
        if: steps.check-outdated.outputs.has_updates == 'true'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'chore: update .NET dependencies'
          title: 'Automated Dependency Update'
          body: |
            This PR updates .NET dependencies to their latest compatible versions.
            
            ## Changes
            - Updated NuGet packages to latest minor/patch versions
            - All tests pass with updated dependencies
            
            ## Outdated Packages Report
            ```json
            $(cat outdated.json)
            ```
            
            ## Verification
            - [x] Build succeeds
            - [x] Tests pass
            - [x] No breaking changes detected
            
            Please review the changes and merge if everything looks good.
          branch: dependency-updates
          delete-branch: true
          labels: |
            dependencies
            automated-pr

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore packages
        run: dotnet restore

      - name: Run security audit
        run: |
          # List packages with known vulnerabilities
          dotnet list package --vulnerable --include-transitive > security-report.txt
          
          if grep -q "has the following vulnerable packages" security-report.txt; then
            echo "Security vulnerabilities found!"
            cat security-report.txt
            exit 1
          else
            echo "No security vulnerabilities found in packages"
          fi

      - name: Create security issue
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('security-report.txt', 'utf8');
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'ðŸš¨ Security Vulnerabilities Detected in Dependencies',
              body: `## Security Audit Report
              
              Automated security scan detected vulnerable packages in the project dependencies.
              
              \`\`\`
              ${report}
              \`\`\`
              
              Please review and update the affected packages as soon as possible.
              
              ## Next Steps
              1. Review the vulnerable packages listed above
              2. Update to secure versions
              3. Run tests to ensure compatibility
              4. Deploy the fixes
              
              This issue was automatically created by the dependency update workflow.`,
              labels: ['security', 'dependencies', 'high-priority']
            });